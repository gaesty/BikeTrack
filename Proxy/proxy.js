/**
 * @file proxy.js
 * @description Serveur proxy Node.js pour BikeTrack
 * @author BikeTrack Team
 * @version 1.0
 * 
 * Ce serveur proxy fait le pont entre les appareils IoT (module LilyGO A7670E)
 * et la base de donnÃ©es Supabase. Il reÃ§oit les donnÃ©es de tÃ©lÃ©mÃ©trie compactes
 * des appareils et les reformate pour insertion dans Supabase.
 * 
 * FonctionnalitÃ©s:
 * - RÃ©ception des donnÃ©es JSON via HTTP POST
 * - Mapping/expansion des champs compacts vers le schÃ©ma Supabase
 * - Transmission sÃ©curisÃ©e vers l'API REST Supabase
 * - Gestion des erreurs et logging
 */

// Import des modules Node.js requis
const express = require('express') // Framework web pour crÃ©er l'API REST
const axios   = require('axios')   // Client HTTP pour appels vers Supabase
const app     = express()          // Instance de l'application Express

// Middleware pour parser automatiquement les requÃªtes JSON
app.use(express.json())

// Configuration Supabase - ParamÃ¨tres de connexion Ã  la base de donnÃ©es
const SUPABASE_URL     = {SUPABASE_URL}
// ClÃ© API anonyme Supabase (permet l'insertion avec les politiques RLS)
const SUPABASE_API_KEY = {SUPABASE_API_KEY}

/**
 * Route POST /proxy
 * Point d'entrÃ©e principal pour recevoir les donnÃ©es des appareils IoT
 * 
 * Fonctionnement:
 * 1. ReÃ§oit les donnÃ©es JSON compactes depuis les modules IoT
 * 2. Effectue le mapping vers le schÃ©ma complet Supabase
 * 3. Transmet les donnÃ©es formatÃ©es Ã  Supabase
 * 4. Retourne une rÃ©ponse de succÃ¨s/erreur
 * 
 * @param {Object} req.body - DonnÃ©es de tÃ©lÃ©mÃ©trie au format compact
 * @returns {Object} - RÃ©ponse JSON avec statut de l'opÃ©ration
 */
app.post('/proxy', async (req, res) => {
  try {
    // RÃ©cupÃ©ration des donnÃ©es envoyÃ©es par l'appareil IoT
    const p = req.body

    // Mapping/expansion des champs compacts vers le schÃ©ma Supabase complet
    // Cette approche permet d'Ã©conomiser la bande passante mobile
    const payload = {
      // Identification et mÃ©tadonnÃ©es de l'appareil
      device_id     : p.id      || p.device_id,      // ID unique de l'appareil
      signal_quality: p.sig     || p.signal_quality, // QualitÃ© du signal cellulaire (0-31)
      data_source   : p.src     || p.data_source,    // Source des donnÃ©es ("4G", "WiFi", etc.)
      uptime_seconds: p.up      || p.uptime_seconds, // Temps de fonctionnement en secondes

      // DonnÃ©es GPS/GNSS - Position et navigation
      gps_valid     : p.gps     || p.gps_valid,     // ValiditÃ© du fix GPS
      latitude      : p.lat     || p.latitude,      // Latitude en degrÃ©s dÃ©cimaux
      longitude     : p.lng     || p.longitude,     // Longitude en degrÃ©s dÃ©cimaux
      altitude      : p.alt     || p.altitude,      // Altitude en mÃ¨tres
      satellites    : p.sat     || p.satellites,    // Nombre de satellites visibles
      hdop          : p.hdop    || p.hdop,          // Dilution de prÃ©cision horizontale

      // DonnÃ©es accÃ©lÃ©romÃ¨tre - DÃ©tection de mouvement et vibrations
      accel_valid   : p.acc     || p.accel_valid,   // ValiditÃ© des donnÃ©es accÃ©lÃ©romÃ¨tre
      accel_x       : p.ax      || p.accel_x,       // AccÃ©lÃ©ration axe X (g)
      accel_y       : p.ay      || p.accel_y,       // AccÃ©lÃ©ration axe Y (g)
      accel_z       : p.az      || p.accel_z,       // AccÃ©lÃ©ration axe Z (g)

      // DonnÃ©es gyroscope - DÃ©tection de rotation et basculement
      gyro_valid    : p.gyr     || p.gyro_valid,    // ValiditÃ© des donnÃ©es gyroscope
      gyro_x        : p.gx      || p.gyro_x,        // Vitesse angulaire axe X (Â°/s)
      gyro_y        : p.gy      || p.gyro_y,        // Vitesse angulaire axe Y (Â°/s)
      gyro_z        : p.gz      || p.gyro_z,        // Vitesse angulaire axe Z (Â°/s)

      // DonnÃ©es magnÃ©tomÃ¨tre - Boussole numÃ©rique (optionnel)
      mag_valid     : p.mag     || p.mag_valid,     // ValiditÃ© des donnÃ©es magnÃ©tomÃ¨tre
      mag_x         : p.mx      || p.mag_x,         // Champ magnÃ©tique axe X (ÂµT)
      mag_y         : p.my      || p.mag_y,         // Champ magnÃ©tique axe Y (ÂµT)
      mag_z         : p.mz      || p.mag_z,         // Champ magnÃ©tique axe Z (ÂµT)

      // DonnÃ©es environnementales
      temp_valid    : (p.tmp    !== undefined) || p.temp_valid, // ValiditÃ© tempÃ©rature
      temperature   : p.tmp     || p.temperature  // TempÃ©rature interne (Â°C)
    }

    // Envoi des donnÃ©es formatÃ©es vers Supabase via API REST
    const response = await axios.post(SUPABASE_URL, payload, {
      headers: {
        // En-tÃªtes d'authentification Supabase
        apikey       : SUPABASE_API_KEY,
        Authorization: `Bearer ${SUPABASE_API_KEY}`,
        'Content-Type': 'application/json',
        Prefer        : 'return=minimal' // RÃ©ponse minimaliste pour Ã©conomiser la bande passante
      }
    })

    // RÃ©ponse de succÃ¨s Ã  l'appareil IoT
    res.status(200).json({ success: true })
  } catch (error) {
    // Gestion des erreurs avec logging dÃ©taillÃ©
    console.error('Erreur proxy:', error.response?.data || error.message)
    // Retour de l'erreur Ã  l'appareil IoT
    res.status(error.response?.status || 500).json({ error: error.message })
  }
})

// Configuration du serveur - Ã‰coute sur le port 3000
const PORT = 3000
app.listen(PORT, () => {
  console.log(`ğŸš€ Proxy Supabase BikeTrack dÃ©marrÃ© sur le port ${PORT}`)
  console.log(`ğŸ“¡ PrÃªt Ã  recevoir les donnÃ©es des appareils IoT`)
  console.log(`ğŸ”— Endpoint: http://localhost:${PORT}/proxy`)
})
